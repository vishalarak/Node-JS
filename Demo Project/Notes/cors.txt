CORS (Cross-Origin Resource Sharing):

# What is CORS?
                CORS is a security feature implemented by web browsers to control and restrict web page scripts (e.g., JavaScript) in one domain from making requests to resources located on a different domain (a different origin).

# Why is CORS important?
                        CORS is important for security. Without CORS, a malicious website could potentially make unauthorized requests to other websites on behalf of a user, which can lead to data theft or other security vulnerabilities.

# How CORS works:
                    When a web page hosted on one domain makes an XMLHttpRequest or fetch request to a different domain, the browser sends an HTTP request with an Origin header indicating where the request originated.
                    The server on the receiving end can decide whether to allow or deny the request based on the Origin header.
                    If the server allows the request, it includes the Access-Control-Allow-Origin header in its response to specify which origins are permitted to access its resources.
                    If the server denies the request or doesn't include the proper Access-Control-Allow-Origin header, the browser blocks the request, and JavaScript on the page won't be able to access the response data.

# Configuring CORS:
                    To allow cross-origin requests, the server needs to include the appropriate CORS headers in its responses.
                    In Node.js (using a framework like Express), you can configure CORS by adding middleware that sets the necessary headers.


# Here's a basic example using Express:

const express = require('express');
const app = express();

// Enable CORS for all origins (not recommended for production)
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  next();
});

// Your routes and server setup go here

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
